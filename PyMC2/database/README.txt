-----------------
Database backends
-----------------


A typical MCMC run will generate thousands of samples, and some application requires well over 100000 iterations. Keeping all this information in memory can badly strain the performances of PyMC, and users will find their other applications slowing down. Moreover, we generally wish to store all or part of the sampled data for future use. To do so, PyMC offers different storing strategies:

  - keep everything in RAM (default),
  - keep everything in RAM, and dump samples in txt files once sampling is completed,
  - store data in a sqlite database,
  - store data in a hdf5 file. 

Although what happens under the hood is very different from one backend to another, from the user perspective, there is no difference whatsoever. The only thing that will change is the outfile file (if any) generated by the backend. 


RAM backend
-----------
Describe the RAM backend. 

txt backend
-----------
This backend is identical to the RAM backend, the only difference is that a directory named after the model's name is created, and at the end of the sampling, when `Trace._finalize()` is called, the parameters and nodes dump their trace to a txt file named `<name>.txt`.

sqlite backend
--------------
blablabla

Writing a new backend
---------------------

Each backend is implemented in a file in the database directory. Each one of these files define two classes: Trace and Database. Hence, a new backend can easily be implemented by defining new classes and saving them in a file. The Trace class needs to define four basic methods: _initialize, tally, gettrace and _finalize, plus its own __init__ method.  The Database class defines an __init__ method, plus _initialize and _finalize. 
